//! gcode2svg
//!
#![deny(clippy::all)]
#![warn(clippy::cargo)]
#![warn(clippy::complexity)]
#![warn(clippy::pedantic)]
#![warn(clippy::nursery)]
#![warn(clippy::perf)]
#![warn(missing_debug_implementations)]
#![warn(missing_docs)]
use std::io::stdin;
use std::io::BufRead;
use std::io::Result;

mod command;
mod pos;
mod svg;

use crate::command::Command;

fn main() -> Result<()> {
    let stdin = stdin();
    for result in stdin.lock().lines() {
        let line = result?;
        let decoded = Command::parse_line(&line);
        match decoded {
            Ok((_, Command::G1(payload))) => {
                println!("G1 payload {payload:?}");
            }
            Ok((remain, Command::G21)) => {
                println!("G21 {remain}");
            }
            Ok((remain, Command::G91)) => {
                println!("G91 {remain}");
            }
            Ok((_, Command::G92(payload))) => {
                println!("G92 payload {payload:?}");
            }
            Ok((remain, Command::GDrop(code))) => {
                println!("G_Drop code {code:#?}, payload {remain}, ");
            }
            Ok((remain, Command::MDrop(code))) => {
                println!("M_Drop code {code:#?}, payload {remain}, ");
            }
            Ok(_) => {}
            Err(e) => {
                eprintln!("Failed to decode sentence {e}");
            }
        };
    }
    Ok(())
}

#[cfg(test)]
mod test {
    use crate::command::Command;

    static INPUT: &str = r#"
; generated by Slic3r 1.2.9 on 2015-10-01 at 20:51:53

; external perimeters extrusion width = 0.40mm
; perimeters extrusion width = 0.67mm
; infill extrusion width = 0.67mm
; solid infill extrusion width = 0.67mm
; top infill extrusion width = 0.67mm

M107
M190 S65 ; set bed temperature
M104 S205 ; set temperature
G28 ; home all axes
G1 Z5 F5000 ; lift nozzle
M109 S205 ; wait for temperature to be reached
G21 ; set units to millimeters
G90 ; use absolute coordinates
M82 ; use absolute distances for extrusion
G92 E0
G1 E-1.00000 F1800.00000
G92 E0
G1 Z0.350 F7800.000
"#;

    #[test]
    fn nothing_unhandled() {
        // The first few lines of the benchy file must be recognised.
        for line in INPUT.lines() {
            assert!(Command::parse_line(line).is_ok());
        }
    }
}
